// This is your Prisma schema file,
// learn more about it in the docs: https://pris.ly/d/prisma-schema

// pnpm dlx prisma migrate dev --name init
// pnpm dlx prisma generate
// pnpm dlx prisma studio

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id          Int    @id() @default(autoincrement())
  username    String @unique
  displayName String

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt

  rooms        Room[]
  votes        Vote[]
  chats        Chat[]
  posts        Post[]
  postLikes    PostLike[]
  comments     Comment[]
  commentLikes CommentLike[]
}

model Room {
  id     Int    @id() @default(autoincrement())
  name   String
  userId Int

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())

  votes Vote[]
  chats Chat[]
}

model Chat {
  id      Int    @id() @default(autoincrement())
  message String
  userId  Int
  roomId  Int

  user      User     @relation(fields: [userId], references: [id], onDelete: Cascade)
  room      Room     @relation(fields: [roomId], references: [id], onDelete: Cascade)
  createdAt DateTime @default(now())
}

model Vote {
  id     Int @id() @default(autoincrement())
  userId Int
  roomId Int

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  room Room @relation(fields: [roomId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
}

model Post {
  id     Int    @id() @default(autoincrement())
  title  String
  body   String
  userId Int

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime   @default(now())
  updatedAt DateTime   @default(now()) @updatedAt
  comments  Comment[]
  postLikes PostLike[]
  postStats PostStats?
}

model PostStats {
  id            Int @id() @default(autoincrement())
  likes         Int @default(0)
  commentsCount Int @default(0)

  postId Int @unique

  post Post @relation(fields: [postId], references: [id], onDelete: Cascade)

  updatedAt DateTime @default(now()) @updatedAt
}

model PostLike {
  id Int @id() @default(autoincrement())

  postId Int
  userId Int

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  post Post @relation(fields: [postId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt

  @@unique([postId, userId])
}

model Comment {
  id               Int    @id() @default(autoincrement())
  text             String
  likes            Int    @default(0)
  subcommentsCount Int    @default(0)

  userId          Int
  postId          Int
  parentCommentId Int?

  commentLikes CommentLike[]

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  post Post @relation(fields: [postId], references: [id], onDelete: Cascade)

  createdAt DateTime  @default(now())
  updatedAt DateTime  @default(now()) @updatedAt
  deletedAt DateTime?
}

model CommentLike {
  id Int @id() @default(autoincrement())

  commentId Int
  userId    Int

  user    User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  comment Comment @relation(fields: [commentId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt

  @@unique([commentId, userId])
}
