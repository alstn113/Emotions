// learn more about it in the docs: https://pris.ly/d/prisma-schema
// This is your Prisma schema file,

// pnpm dlx prisma migrate dev --name init
// pnpm dlx prisma generate
// pnpm dlx prisma studio

generator client {
  provider = "prisma-client-js"
}

datasource db {
  provider = "postgresql"
  url      = env("DATABASE_URL")
}

model User {
  id           String  @id() @default(uuid())
  username     String  @unique
  displayName  String
  email        String? @unique
  profileImage String?

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt

  posts             Post[]
  postLikes         PostLike[]
  comments          Comment[]     @relation("user")
  mentionedComments Comment[]     @relation("mentionUser")
  commentLikes      CommentLike[]
  Series            Series[]
}

model Post {
  id          String  @id() @default(uuid())
  title       String
  slug        String
  description String
  body        String
  userId      String
  thumbnail   String?

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt

  comments   Comment[]
  postLikes  PostLike[]
  tags       PostsOnTags[]
  postStats  PostStats?
  seriesPost SeriesPost?

  @@unique([slug, userId])
}

model Series {
  id          String       @id() @default(uuid())
  name        String       @unique
  userId      String
  seriesPosts SeriesPost[]

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt

  @@unique([name, userId])
  @@unique([id, userId])
}

model SeriesPost {
  id       String @id() @default(uuid())
  index    Int
  seriesId String
  postId   String @unique

  post   Post   @relation(fields: [postId], references: [id], onDelete: Cascade)
  series Series @relation(fields: [seriesId], references: [id], onDelete: Cascade)
}

model PostStats {
  id            String @id() @default(uuid())
  likes         Int    @default(0)
  commentsCount Int    @default(0)

  postId String @unique

  post Post @relation(fields: [postId], references: [id], onDelete: Cascade)

  updatedAt DateTime @default(now()) @updatedAt
}

model PostLike {
  id String @id() @default(uuid())

  postId String
  userId String

  user User @relation(fields: [userId], references: [id], onDelete: Cascade)
  post Post @relation(fields: [postId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt

  @@unique([postId, userId])
}

model Comment {
  id               String @id() @default(uuid())
  text             String
  likes            Int    @default(0)
  subcommentsCount Int    @default(0)

  userId          String
  postId          String
  parentCommentId String?
  mentionUserId   String?

  commentLikes CommentLike[]

  user        User  @relation("user", fields: [userId], references: [id], onDelete: Cascade)
  mentionUser User? @relation("mentionUser", fields: [mentionUserId], references: [id], onDelete: Cascade)
  post        Post  @relation(fields: [postId], references: [id], onDelete: Cascade)

  createdAt DateTime  @default(now())
  updatedAt DateTime  @default(now()) @updatedAt
  deletedAt DateTime?
}

model CommentLike {
  id String @id() @default(uuid())

  commentId String
  userId    String

  user    User    @relation(fields: [userId], references: [id], onDelete: Cascade)
  comment Comment @relation(fields: [commentId], references: [id], onDelete: Cascade)

  createdAt DateTime @default(now())
  updatedAt DateTime @default(now()) @updatedAt

  @@unique([commentId, userId])
}

model Tag {
  id    String        @id() @default(uuid())
  name  String        @unique
  posts PostsOnTags[]
}

model PostsOnTags {
  postId String
  tagId  String

  post Post @relation(fields: [postId], references: [id], onDelete: Cascade)
  tag  Tag  @relation(fields: [tagId], references: [id], onDelete: Cascade)

  @@id([postId, tagId])
}
